package templates

import (
	"fmt"
	"github.com/dmitkov28/dietapp/internal/repositories"
	"math"
)

templ HomePage(date string, currentData repositories.WeeklyStats, settings repositories.Settings, calorieGoal, expectedDuration float64, weightChart string, hasCurrentWeek, needsAdjustment, isHTMX bool) {
	if isHTMX {
		@Content(date, currentData, settings, calorieGoal, expectedDuration, weightChart, hasCurrentWeek, needsAdjustment)
	} else {
		@Base(TemplateProps{PageTitle: "Home"}) {
			@Content(date, currentData, settings, calorieGoal, expectedDuration, weightChart, hasCurrentWeek, needsAdjustment)
		}
	}
}

templ Content(date string, currentData repositories.WeeklyStats, settings repositories.Settings, calorieGoal, expectedDuration float64, weightChart string, hasCurrentWeek, needsAdjustment bool) {
	<div class="w-full flex flex-col flex-1 justify-center items-center p-8">
		<div class="w-full grid grid-cols-1 gap-4">
			<div class="col-span-1 text-center">
				<h1 class="font-bold text-2xl">{ date }</h1>
				if !hasCurrentWeek {
					<span class="text-sm font-light italic text-slate-400">Data for current week not availble</span>
				}
			</div>
			@Card(CardProps{iconSrc: "static/img/trophy.svg", positiveChange: currentData.PercentChange <= settings.Target_weight_loss_rate, changeRate: currentData.PercentChange, value: currentData.AverageWeight, unit: "kg"})
			@Card(CardProps{iconSrc: "/static/img/calories.svg", value: math.Ceil(calorieGoal), unit: "cal", roundValue: true})
			if needsAdjustment {
				<span id="warning" class="text-center text-sm text-red-500 animate-pulse">Progress has slowed down. Consider decreasing calories</span>
			}
			if expectedDuration != 0 {
				@Card(CardProps{iconSrc: "/static/img/calendar.svg", value: math.Abs(math.Ceil(expectedDuration)), unit: "weeks to go", roundValue: true})
			}
			<div>
				@templ.Raw(weightChart)
			</div>
		</div>
	</div>
	<script>
			function displayWarning () {
				const warning = document.getElementById("warning");
				if (warning) {
					setTimeout(() => {
						warning.style.display = "none";
					}, 5000)
				};
				displayWarning();
			}
		</script>
}

type CardProps struct {
	unit           string
	value          float64
	changeRate     float64
	positiveChange bool
	iconSrc        string
	roundValue     bool
}

templ Card(props CardProps) {
	<div
		class="md:col-span-1 text-center col-span-2 flex gap-4 justify-center items-center rounded-md border border-slate-200 shadow-md p-3"
	>
		if  props.iconSrc != "" {
			<img alt="trendline icon" g src={ props.iconSrc } class="h-5"/>
		}
		if !(props.value > 0) {
			<span class="text-xl font-bold text-center">N/A</span>
		} else {
			if props.roundValue {
				<span class="text-xl font-bold text-center">{ fmt.Sprintf("%.0f", props.value) } { props.unit }</span>
			} else {
				<span class="text-xl font-bold text-center">{ fmt.Sprintf("%.1f", props.value) } { props.unit }</span>
			}
			if !(math.IsNaN(props.changeRate)) && !(props.changeRate == 0) {
				<span
					class={
						"text-sm font-semibold text-center flex justify-center items-center gap-1",
						templ.KV("text-green-500", props.positiveChange),
						templ.KV("text-red-500", !props.positiveChange),
					}
				>
					if props.positiveChange {
						<img alt="arrow down icon" class="h-4" src="/static/img/arrow-down.svg"/>
					} else {
						<img alt="arrow up icon" class="h-4" src="/static/img/arrow-up.svg"/>
					}
					<span>
						{ fmt.Sprintf("%.2f", props.changeRate) } %
					</span>
				</span>
			}
		}
	</div>
}
