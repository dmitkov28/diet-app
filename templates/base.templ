package templates

type TemplateProps struct {
	PageTitle string
	Head      templ.Component
}

templ Base(props TemplateProps) {
	<!DOCTYPE html>
	<html class="min-h-screen overscroll-none" lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
			<meta name="theme-color" content="#FFFFFF"/>
			<link rel="icon" type="image/png" sizes="16x16" href="/static/img/favicon/favicon-16x16.png"/>
			<link rel="icon" type="image/png" sizes="32x32" href="/static/img/favicon/favicon-32x32.png"/>
			<meta name="htmx-config" content='{"includeIndicatorStyles": false}'/>
			<meta name="apple-mobile-web-app-capable" content="yes"/>
			<meta name="mobile-web-app-capable" content="yes"/>
			<meta name="apple-mobile-web-app-status-bar-style" content="default"/>
			<meta name="apple-mobile-web-app-title" content="Diet App"/>
			<title>{ props.PageTitle }</title>
			<link rel="stylesheet" href="/static/css/main.css"/>
			<link rel="manifest" href="/static/manifest.json"/>
			<link rel="apple-touch-icon" href="/static/img/favicon/apple-touch-icon.png"/>
			<script src="https://unpkg.com/htmx.org@1.9.10"></script>
			<script src="https://go-echarts.github.io/go-echarts-assets/assets/echarts.min.js"></script>
			
			if props.Head != nil {
				@props.Head
			}
			@Favicons()
		</head>
		<body class="min-h-screen flex flex-col pt-4 relative select-none">
			<main id="main-content" class="flex flex-col flex-1">
				{ children... }
			</main>
			if props.PageTitle != "Login" {
				@Nav()
			}
		</body>
		<script>
			document.addEventListener("DOMContentLoaded", lazyLoadScripts);
			document.body.addEventListener('htmx:beforeSwap', function(evt) {
				if(evt.detail.xhr.status === 404){
					alert("Error: Could Not Find Resource");
				} else if(evt.detail.xhr.status === 400){
					// allow 422 responses to swap as we are using this as a signal that
					// a form was submitted with bad data and want to rerender with the
					// errors
					//
					// set isError to false to avoid error logging in console
					evt.detail.shouldSwap = true;
					evt.detail.isError = false;
				} else if(evt.detail.xhr.status === 418){
					// if the response code 418 (I'm a teapot) is returned, retarget the
					// content of the response to the element with the id `teapot`
					evt.detail.shouldSwap = true;
					evt.detail.target = htmx.find("#teapot");
				};
		});

		function appendScript(src){
			const script = document.createElement("script");
			script.src = src;
			document.head.appendChild(script);
		};

		function appendStyles(src){
			const link = document.createElement("link")
			link.rel = "stylesheet";
			link.href = src
			document.head.appendChild(link);
		};

		function lazyLoadScripts(){
			appendScript("https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js");
			appendStyles("https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css");
			appendScript("https://www.unpkg.com/quagga@0.12.1/dist/quagga.min.js");
		};

		window.addEventListener("htmx:afterSwap", (ev) => {
			const path = ev.detail.pathInfo.finalRequestPath;
			if (path === "/scan"){
				console.log("SCAN");
				initializeQuagga();
			}
		});

		function initializeQuagga(){
			Quagga.init({
			inputStream: {
				name: "Live",
				type: "LiveStream",
				target: document.querySelector('#quagga'),
				constraints: {
					width: 1280, // High resolution for better accuracy
					height: 720,
					facingMode: "environment", // Use the back camera
					focusMode: "continuous" // Ensure continuous focus
				}
			},
			decoder: {
				readers: ["ean_reader", "ean_8_reader"],
				multiple: false, // Only decode one barcode at a time
			},
			locator: {
				patchSize: "medium", // Medium size for balance between speed and accuracy
				halfSample: true // Improves performance on high-res devices
			},
			locate: true, // Enable locating feature for better scanning
			frequency: 1 // Process images every 10 frames for better accuracy
		}, function (err) {
			if (err) {
				console.log(err);
				return;
			}
			console.log("Initialization finished. Ready to start");
			Quagga.start();
		});

			Quagga.onDetected(async function (data) {
				const code = data.codeResult.code;
				const output = document.getElementById("quagga");
				if (output) {
					await htmx.ajax("GET", `/scan/${code}`, {target: "#modal-container", swap: "innerHTML"});

				}
				Quagga.stop();
			});
		}
		</script>
	</html>
}
