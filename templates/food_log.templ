package templates

import (
	"fmt"
	"github.com/dmitkov28/dietapp/internal/repositories"
	"time"
)

func formatDate(date string) string {
	dateTime, err := time.Parse("2006-01-02", date)
	if err != nil {
		fmt.Println(err)
	}
	formattedDate := dateTime.Format("02 Jan, 2006")
	return formattedDate
}

templ FoodLogScripts() {
	<link
		rel="stylesheet"
		href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"
	/>
	<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
}

templ FoodLogPage(foodLogs []repositories.FoodLogEntry, totals repositories.FoodLogTotals, date, prevDate, nextDate string, isHTMX bool) {
	if isHTMX {
		@ContentFoodLogPage(foodLogs, totals, date, prevDate, nextDate)
	} else {
		@Base(TemplateProps{PageTitle: "Food Log", Head: FoodLogScripts()}) {
			@ContentFoodLogPage(foodLogs, totals, date, prevDate, nextDate)
		}
	}
}

templ ContentFoodLogPage(foodLogs []repositories.FoodLogEntry, totals repositories.FoodLogTotals, date, prevDate, nextDate string) {
	<div class="w-full md:max-w-4xl max-w-lg mx-auto p-4 sm:px-6 lg:px-8">
		<div
			class="swiper w-full"
			data-prev-date={ prevDate }
			data-next-date={ nextDate }
			data-current-date={ date }
		>
			<div class="swiper-wrapper">
				<div class="swiper-slide">
					@FoodLogLoadingSkeleton()
				</div>
				<div class="swiper-slide">
					<div class="mx-auto w-fit flex items-center justify-between gap-4">
						<span class="flex w-full h-full">
							<img alt="chevron left icon" onclick="swiper.slidePrev()" class="h-5 cursor-pointer" src="/static/img/chevron-left.svg"/>
						</span>
						<form
							hx-get="/food_log"
							hx-trigger="change delay:1s"
							hx-target="#main-content"
							hx-indicator="#loading"
							class="w-full flex justify-center"
						>
							<input
								type="date"
								name="date"
								if date != "" {
									value={ date }
								} else {
									value={ time.Now().Format("2006-01-02") }
								}
							/>
						</form>
						<span class="flex w-full h-full">
							<img alt="chevron right icon" onclick="swiper.slideNext()" class="h-5 cursor-pointer" src="/static/img/chevron-right.svg"/>
						</span>
					</div>
					if len(foodLogs) != 0 {
						@FoodLogLoadingSkeleton()
						<div class="w-full flex flex-col flex-1 justify-center items-center p-8">
							<div class="w-full grid grid-cols-1 md:grid-cols-2 md:gap-4 p-6 mx-auto bg-white rounded-lg shadow-md border  max-h-[600px]">
								<div class="col-span-1 md:col-span-2 flex justify-between items-center mb-4">
									<h2 class="text-xl font-bold text-gray-800">Food Log</h2>
									<span class="text-sm text-gray-500">{ formatDate(date) }</span>
								</div>
								<div class="col-span-1">
									<div>
										@FoodLogTotals(totals, date)
										<h3 class="text-lg font-semibold text-gray-700 mb-2">Macros</h3>
										<div class="mb-4">
											<div class="flex justify-between text-sm text-gray-700">
												<span>Protein</span>
												<span>{ fmt.Sprintf("%.1f", totals.TotalProtein) }g of 150g</span>
											</div>
											<div class="w-full bg-gray-200 rounded-full h-2.5 mt-1">
												<div class="bg-blue-500 h-2.5 rounded-full" style="width: 80%;"></div>
											</div>
										</div>
										<div class="mb-4">
											<div class="flex justify-between text-sm text-gray-700">
												<span>Carbs</span>
												<span>{ fmt.Sprintf("%.1f", totals.TotalCarbs) }g of 250g</span>
											</div>
											<div class="w-full bg-gray-200 rounded-full h-2.5 mt-1">
												<div class="bg-yellow-500 h-2.5 rounded-full" style="width: 80%;"></div>
											</div>
										</div>
										<div>
											<div class="flex justify-between text-sm text-gray-700">
												<span>Fat</span>
												<span>{ fmt.Sprintf("%.1f", totals.TotalCarbs) }g of 70g</span>
											</div>
											<div class="w-full bg-gray-200 rounded-full h-2.5 mt-1">
												<div class="bg-red-500 h-2.5 rounded-full" style="width: 71%;"></div>
											</div>
										</div>
									</div>
								</div>
								<div class="mt-6 col-span-1 overflow-y-scroll relative scrollbar-hide">
									<h3 class="sticky z-50 pb-2 top-0 bg-white rounded-b-md text-lg font-semibold text-gray-700 mb-2">
										Logged Food
										if len(foodLogs) != 0 {
											{ fmt.Sprintf("(%d items)", len(foodLogs)) }
										}
									</h3>
									<ul class="space-y-4">
										for _, entry := range foodLogs {
											@FoodLogEntry(entry)
										}
									</ul>
								</div>
							</div>
						</div>
					} else {
						<div class="w-full h-full flex flex-col flex-1 justify-center items-center p-8  min-h-[500px]">
							<div class="flex flex-1 w-full items-center justify-center bg-white rounded-lg shadow-md border">No entries.</div>
						</div>
					}
					<div class="flex justify-center items-center">
						<img alt="plus icon" hx-get="/scan" hx-target="#main-content" class="h-10 cursor-pointer" src="/static/img/plus.svg"/>
					</div>
				</div>
				<div class="swiper-slide">
					@FoodLogLoadingSkeleton()
				</div>
			</div>
		</div>
	</div>
	<script type="module">
			const swipeArea = document.querySelector('.swiper');
			const prevDate = swipeArea.dataset.prevDate;
			const nextDate = swipeArea.dataset.nextDate;
			var swiper = new Swiper(".swiper", {
				direction: 'horizontal',
				initialSlide: 1,
				loop: false,
				threshold: 20,           
				resistance: true,        
				resistanceRatio: 0.85,   
				speed: 250,             
				touchRatio: 1.5,        
				touchAngle: 45,         
				longSwipes: true,
				longSwipesRatio: 0.5,   
				followFinger: true,     
				grabCursor: true,       
				touchStartPreventDefault: false,  
			});

			window.swiper = swiper;

			swiper.on("slidePrevTransitionEnd", () => {
				htmx.ajax("GET", `/food_log?date=${prevDate}`, {
					swap: "innerHTML",
					target: "#main-content"
				})
			});

			swiper.on("slideNextTransitionEnd", () => {
				htmx.ajax("GET", `/food_log?date=${nextDate}`, {
					swap: "innerHTML",
					target: "#main-content"

				})
			});

			document.body.addEventListener("keyup", (e) => {
				if (e.key === "ArrowLeft"){
					swiper.slidePrev()
				}

				if (e.key === "ArrowRight"){
					swiper.slideNext()
				}
			});	
		</script>
}

templ FoodLogTotals(totals repositories.FoodLogTotals, date string) {
	<div
		id="totals"
		hx-get={ fmt.Sprintf("/refresh_totals?date=%s", date) }
		hx-trigger="refreshTotals from:body"
		hx-swap="innerHTML"
		class="mb-4"
	>
		<h3 class="text-lg font-semibold text-gray-700">Total Calories</h3>
		<div class="flex items-center justify-between mt-2">
			<span class="text-2xl font-bold text-gray-800">{ fmt.Sprintf("%.0f", totals.TotalCalories) }</span>
			<span class="text-sm text-gray-500">of { fmt.Sprintf("%.0f", 2000.8) } kcal</span>
		</div>
		<div class="w-full bg-gray-200 rounded-full h-2.5 mt-2">
			<div
				class={ templ.KV("bg-green-500", totals.TotalCalories <= 2000),
									templ.KV("bg-red-700 animate-pulse", totals.TotalCalories > 2000),
									"h-2.5 rounded-full",
									//for some reason dynamically generated numerical values don't get rendered correctly
									fmt.Sprintf("%s", "w-[77%]") }
			></div>
		</div>
	</div>
}

templ FoodLogEntry(entry repositories.FoodLogEntry) {
	<li
		id={ fmt.Sprintf("food-entry-%d", entry.ID) }
		class="group relative flex items-center p-3 bg-gray-100 rounded-lg"
	>
		<div class="w-full pr-4 flex items-center justify-between">
			<div>
				<h4 class="text-md font-medium text-gray-800">{ entry.FoodName } <span class="font-extrabold">x { fmt.Sprintf("%.0f", entry.NumberOfServings) }</span></h4>
				<p class="text-sm text-gray-500">
					Protein: { fmt.Sprintf("%.1f", entry.Protein) }g,
					Carbs: { fmt.Sprintf("%.1f", entry.Carbs) }g, 
					Fat: { fmt.Sprintf("%.1f", entry.Fats) }g
				</p>
			</div>
			<span class="text-sm font-medium text-gray-600">{ fmt.Sprintf("%.f", entry.Calories) } kcal</span>
		</div>
		<img
			alt="bin icon"
			hx-delete={ fmt.Sprintf("/food_log/%d", entry.ID) }
			hx-target={ fmt.Sprintf("#food-entry-%d", entry.ID) }
			hx-swap="outerHTML"
			hx-confirm="Are you sure you want to delete this entry?"
			hx-on-htmx-after-request="alert('Done making a request!')"
			class="h-5 group-hover:flex absolute right-1 cursor-pointer"
			src="/static/img/bin.svg"
		/>
	</li>
}

templ FoodLogLoadingSkeleton() {
	<div id="loading" class="htmx-indicator w-full grid grid-cols-1 md:grid-cols-2 md:gap-4 p-6 mx-auto bg-white rounded-lg shadow-md border max-h-[600px] animate-pulse">
		<div class="col-span-1 md:col-span-2 flex justify-between items-center mb-4">
			<div class="h-6 w-1/3 bg-gray-200 rounded"></div>
			<div class="h-4 w-1/5 bg-gray-200 rounded"></div>
		</div>
		<div class="col-span-1">
			<div class="mb-4">
				<div class="h-5 w-1/4 bg-gray-200 rounded mb-2"></div>
				<div class="flex items-center justify-between mt-2">
					<div class="h-8 w-1/4 bg-gray-200 rounded"></div>
					<div class="h-4 w-1/6 bg-gray-200 rounded"></div>
				</div>
				<div class="w-full bg-gray-200 rounded-full h-2.5 mt-2"></div>
			</div>
			<div>
				<div class="h-5 w-1/4 bg-gray-200 rounded mb-4"></div>
				<div class="mb-4">
					<div class="flex justify-between text-sm text-gray-700">
						<div class="h-4 w-1/5 bg-gray-200 rounded"></div>
						<div class="h-4 w-1/5 bg-gray-200 rounded"></div>
					</div>
					<div class="w-full bg-gray-200 rounded-full h-2.5 mt-1"></div>
				</div>
				<div class="mb-4">
					<div class="flex justify-between text-sm text-gray-700">
						<div class="h-4 w-1/5 bg-gray-200 rounded"></div>
						<div class="h-4 w-1/5 bg-gray-200 rounded"></div>
					</div>
					<div class="w-full bg-gray-200 rounded-full h-2.5 mt-1"></div>
				</div>
				<div>
					<div class="flex justify-between text-sm text-gray-700">
						<div class="h-4 w-1/5 bg-gray-200 rounded"></div>
						<div class="h-4 w-1/5 bg-gray-200 rounded"></div>
					</div>
					<div class="w-full bg-gray-200 rounded-full h-2.5 mt-1"></div>
				</div>
			</div>
		</div>
		<div class="mt-6 col-span-1 overflow-y-scroll relative">
			<div class="sticky z-50 pb-2 top-0 bg-white rounded-b-md">
				<div class="h-5 w-1/4 bg-gray-200 rounded mb-2"></div>
			</div>
			<ul class="space-y-4">
				<li class="flex items-center p-3 bg-gray-100 rounded-lg">
					<div class="w-full pr-4 flex items-center justify-between">
						<div>
							<div class="h-4 w-2/3 bg-gray-200 rounded mb-2"></div>
							<div class="h-3 w-1/2 bg-gray-200 rounded"></div>
						</div>
						<div class="h-4 w-1/5 bg-gray-200 rounded"></div>
					</div>
				</li>
				<li class="flex items-center p-3 bg-gray-100 rounded-lg">
					<div class="w-full pr-4 flex items-center justify-between">
						<div>
							<div class="h-4 w-2/3 bg-gray-200 rounded mb-2"></div>
							<div class="h-3 w-1/2 bg-gray-200 rounded"></div>
						</div>
						<div class="h-4 w-1/5 bg-gray-200 rounded"></div>
					</div>
				</li>
				<li class="flex items-center p-3 bg-gray-100 rounded-lg">
					<div class="w-full pr-4 flex items-center justify-between">
						<div>
							<div class="h-4 w-2/3 bg-gray-200 rounded mb-2"></div>
							<div class="h-3 w-1/2 bg-gray-200 rounded"></div>
						</div>
						<div class="h-4 w-1/5 bg-gray-200 rounded"></div>
					</div>
				</li>
				<li class="flex items-center p-3 bg-gray-100 rounded-lg">
					<div class="w-full pr-4 flex items-center justify-between">
						<div>
							<div class="h-4 w-2/3 bg-gray-200 rounded mb-2"></div>
							<div class="h-3 w-1/2 bg-gray-200 rounded"></div>
						</div>
						<div class="h-4 w-1/5 bg-gray-200 rounded"></div>
					</div>
				</li>
			</ul>
		</div>
	</div>
}
