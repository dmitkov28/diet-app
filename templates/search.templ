package templates

import (
	"fmt"
	"github.com/dmitkov28/dietapp/internal/diet"
)

templ SearchPage(isHTMX bool) {
	if isHTMX {
		@ContentSearchPage()
	} else {
		@Base(TemplateProps{PageTitle: "Search Food"}) {
			@ContentSearchPage()
		}
	}
}

templ ContentSearchPage() {
	<div class="flex flex-col gap-4 flex-1 p-2 md:p-4">
		@SearchComponent()
		<div id="search-results">
			@SearchResultsLoading()
		</div>
	</div>
	<script>
		document.body.addEventListener("keyup", (e) => {
			if (e.key == "Escape"){
				document.getElementById("modal-container").innerHTML = '';
			}
		});

		function handleSuccess(element) {
            setTimeout(() => {
               element.innerHTML = `
			   <div
					id="addbtn"
					hx-post="/test"
					hx-encoding="application/json"
					hx-on::after-swap="handleSuccess()"
					class="cursor-pointer"
				>
					<img class="h-10" src="/static/img/plus.svg"/>
				</div>
			   `
            }, 2000);
        }
	</script>
}

templ SearchComponent() {
	<div class="w-full">
		<input
			hx-get="/search_food"
			hx-trigger="input changed delay:500ms, search"
			hx-target="#search-results"
			hx-indicator="#loading"
			hx-on:input="document.getElementById('search-results').textNode = ''"
			name="query"
			type="search"
			placeholder="Type in a food"
			class="border border-slate-40 p-2 w-full"
		/>
	</div>
}

templ SearchResultsComponent(data []diet.FoodSearchResult) {
	<div>
		<div id="modal-container"></div>
		<ul class="space-y-4">
			for _, item := range data {
				@SearchResultsItem(item)
			}
			<div class="my-4">
				@SearchResultsLoading()
			</div>
		</ul>
	</div>
}

templ SearchResultsItem(item diet.FoodSearchResult) {
	<li class="flex p-4 bg-gray-50 rounded-lg shadow-sm relative">
		<div class="w-full flex justify-between items-center">
			<a
				if item.FoodId != "" {
					hx-get={ fmt.Sprintf("/search_food/modal?food_id=%s&branded=true", item.FoodId) }
				} else {
					hx-get={ fmt.Sprintf("/search_food/modal?food_id=%s&branded=false", item.Name) }
				}
				hx-target="#modal-container"
				hx-trigger="click"
				if item.FoodId !="" {
					hx-indicator={ fmt.Sprintf("#loading-slider-%s", item.FoodId) }
				} else {
					hx-indicator={ fmt.Sprintf("#loading-slider-%s", item.Name) }
				}
				class="flex flex-col gap-1 w-full h-full cursor-pointer"
			>
				<div class="flex gap-2 items-center">
					<img class="max-h-[60px] max-w-[60px] object-contain" src={ item.Thumbnail }/>
					<h2 class="text-lg font-medium text-blue-700 hover:text-blue-900 flex flex-col gap-1">
						{ item.Name }
						<span class="text-slate-400 font-light">
							if item.Calories != 0 {
								{ fmt.Sprintf("%d", item.Calories) } cal,
							}
							{ fmt.Sprintf("%.0f", item.ServingQty) }
							{ item.ServingUnit }
						</span>
					</h2>
				</div>
			</a>
			@AddButton(item)
		</div>
		if item.FoodId != "" {
			@LoadingSlider(item.FoodId)
		} else {
			@LoadingSlider(item.Name)
		}
	</li>
}

templ SearchResultsLoading() {
	<ul id="loading" class="space-y-4 htmx-indicator" id="loading-skeleton">
		for i := 0; i < 10; i++ {
			<li class="flex items-center justify-between p-4 bg-gray-50 rounded-lg shadow-sm animate-pulse">
				<div>
					<div class="h-4 bg-gray-300 rounded w-24 mb-2"></div>
					<div class="h-3 bg-gray-200 rounded w-16"></div>
				</div>
				<div class="h-8 w-20 bg-gray-300 rounded"></div>
			</li>
		}
	</ul>
}

templ AddButton(product diet.FoodSearchResult) {
	<div
		id="addbtn"
		hx-post="/test"
		hx-encoding="application/json"
		hx-on::after-swap="handleSuccess(this)"
		class="cursor-pointer"
	>
		<img class="h-10" src="/static/img/plus.svg"/>
	</div>
}

templ FoodLogSuccess() {
	<div class="flex items-center justify-center">
		<img class="block h-10 animate-shake" src="/static/img/check.svg"/>
	</div>
}

templ FoodItemModal(food diet.FoodFacts) {
	<div
		class="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50"
		id="modal"
	>
		<div class="bg-white border border-slate-300 rounded-lg shadow-lg w-96">
			<div class="p-6 bg-white shadow-lg rounded-lg w-full">
				<div class="flex flex-col justify-between items-start gap-4">
					<h3 class="w-full text-left text-xl font-bold text-gray-800 border-b pb-2">
						{ food.Name }
					</h3>
					<ul class="w-full space-y-2 text-sm text-gray-600">
						<li><b class="text-gray-700">Calories:</b> { fmt.Sprintf("%d", food.Calories) }</li>
						<li><b class="text-gray-700">Protein:</b> { fmt.Sprintf("%.0f", food.Protein) } g</li>
						<li><b class="text-gray-700">Carbs:</b> { fmt.Sprintf("%.0f", food.Carbs) } g</li>
						<li><b class="text-gray-700">Fat:</b> { fmt.Sprintf("%.0f", food.Fat) } g</li>
					</ul>
				</div>
				<form
					hx-post="/food_log"
					hx-ext="json-enc"
					hx-vals={ templ.JSONString(food) }
					class="flex flex-col gap-4 mt-4"
				>
					<div>
						<label class="block text-sm text-gray-500 mb-1">Number Of Servings</label>
						<input
							name="number_of_servings"
							class="w-full px-3 py-2 border rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
							type="number"
							step="0.1"
							value={ fmt.Sprintf("%.1f", food.ServingQty) }
						/>
					</div>
					<div>
						<label class="block text-sm text-gray-500 mb-1">Serving Size</label>
						<input
							class="w-full px-3 py-2 border bg-gray-100 text-gray-500 rounded-md focus:outline-none"
							type="text"
							disabled
							value={ food.ServingUnit }
						/>
					</div>
					<button
						class="w-full bg-blue-500 text-white font-medium px-4 py-2 rounded-md transition duration-200 focus:outline-none"
					>
						Add
					</button>
				</form>
				<button
					class="mt-2 w-full bg-red-500 text-white font-medium px-4 py-2 rounded-md transition duration-200 hover:bg-red-600 focus:outline-none"
					onclick="document.getElementById('modal-container').innerHTML =''"
				>
					Close
				</button>
			</div>
		</div>
	</div>
}

templ LoadingSlider(itemId string) {
	<div id={ fmt.Sprintf("loading-slider-%s", itemId) } class="htmx-indicator absolute bottom-0 left-0 w-full h-1 overflow-hidden bg-gray-200">
		<div class="h-full bg-blue-500 animate-[slide_2s_linear_infinite]"></div>
	</div>
}
