package templates

import (
	"encoding/json"
	"fmt"
	"github.com/dmitkov28/dietapp/diet"
)

templ SearchPage() {
	@Base("Search Food") {
		<div class="flex flex-col gap-4 flex-1 p-2">
			@SearchComponent()
			<div id="search-results">
				@SearchResultsLoading()
			</div>
		</div>
	}
}

templ SearchComponent() {
	<div class="w-full">
		<input
			hx-get="/search_food"
			hx-trigger="input changed delay:500ms, search"
			hx-target="#search-results"
			hx-indicator="#loading"
			name="query"
			type="search"
			placeholder="Type in a food"
			class="border border-slate-40 p-2 w-full"
		/>
	</div>
}

templ SearchResultsComponent(data diet.SearchedFoodResponse, food string, nextPage int) {
	<div>
		<ul class="space-y-4">
			for i, item := range data.Products {
				if i == data.PageSize - 1 {
					<li
						hx-get={ fmt.Sprintf("/search_food?query=%s&page=%d", food, nextPage) }
						hx-trigger="revealed"
						hx-indicator="#loading"
						hx-swap="afterend"
						class="flex items-center justify-between p-4 bg-gray-50 rounded-lg shadow-sm"
					>
						<div class="w-full">
							<a href="#" target="_blank">
								<h2 class="text-lg font-medium text-blue-700 hover:text-blue-900">
									{ item.ProductName }
									if item.Brands != "" {
										({ item.Brands })
									}
								</h2>
							</a>
							<div class="grid grid-cols-2 gap-2">
								<div class="col-span-2 md:col-span-1 mb-2 md:mb-0">
									<p class="text-sm text-gray-500">Calories: { fmt.Sprintf("%.0f", item.Nutriments.EnergyKcal) } kcal</p>
									<p class="text-sm text-gray-500">Protein: { fmt.Sprintf("%.0f", item.Nutriments.Proteins) } g</p>
									<p class="text-sm text-gray-500">Carbs: { fmt.Sprintf("%.0f", item.Nutriments.Carbohydrates) } g</p>
									<p class="text-sm text-gray-500">Fat: { fmt.Sprintf("%.0f", item.Nutriments.Fat) } g</p>
								</div>
								<div class="flex col-span-2 md:col-span-1 justify-center md:justify-end">
									@AddFoodForm(item.ProductName, item.ServingSize, item.ServingQuantity, item.Nutriments.EnergyKcalServing, item.Nutriments.Proteins, item.Nutriments.CarbohydratesServing, item.Nutriments.FatServing)
								</div>
							</div>
						</div>
					</li>
				} else {
					<li
						class="flex items-center justify-between p-4 bg-gray-50 rounded-lg shadow-sm"
					>
						<div class="w-full">
							<a href="#" target="_blank">
								<h2 class="text-lg font-medium text-blue-700 hover:text-blue-900">
									{ item.ProductName }
									if item.Brands != "" {
										({ item.Brands })
									}
								</h2>
							</a>
							<div class="grid grid-cols-2 gap-2">
								<div class="col-span-2 md:col-span-1 mb-2 md:mb-0">
									<p class="text-sm text-gray-500">Calories: { fmt.Sprintf("%.0f", item.Nutriments.EnergyKcal) } kcal</p>
									<p class="text-sm text-gray-500">Protein: { fmt.Sprintf("%.0f", item.Nutriments.Proteins) } g</p>
									<p class="text-sm text-gray-500">Carbs: { fmt.Sprintf("%.0f", item.Nutriments.Carbohydrates) } g</p>
									<p class="text-sm text-gray-500">Fat: { fmt.Sprintf("%.0f", item.Nutriments.Fat) } g</p>
								</div>
								<div class="flex col-span-2 md:col-span-1 justify-center md:justify-end">
									@AddFoodForm(item.ProductName, item.ServingSize, item.ServingQuantity, item.Nutriments.EnergyKcalServing, item.Nutriments.Proteins, item.Nutriments.CarbohydratesServing, item.Nutriments.FatServing)
								</div>
							</div>
						</div>
					</li>
				}
			}
			<div class="my-4">
				@SearchResultsLoading()
			</div>
		</ul>
	</div>
}

templ SearchResultsLoading() {
	<ul id="loading" class="space-y-4 htmx-indicator" id="loading-skeleton">
		for i := 0; i < 10; i++ {
			<li class="flex items-center justify-between p-4 bg-gray-50 rounded-lg shadow-sm animate-pulse">
				<div>
					<div class="h-4 bg-gray-300 rounded w-24 mb-2"></div>
					<div class="h-3 bg-gray-200 rounded w-16"></div>
				</div>
				<div class="h-8 w-20 bg-gray-300 rounded"></div>
			</li>
		}
	</ul>
}

templ AddFoodForm(productName string, servingSize string, servingQuantity interface{}, calories, protein, carbs, fat float64) {
	<form hx-post="/food_log" hx-ext="" hx-vals={ templ.JSONString(diet.SearchFoodProduct{ProductName: productName, Nutriments: diet.Nutriments{Proteins: protein, FatServing: fat, CarbohydratesServing: carbs, EnergyKcalServing: calories}}) } hx-encoding="application/json" hx-boost="true" class="w-full md:w-fit flex flex-col items-center gap-2">
		<input class="hidden p-2 bg-white rounded-md shadow-md pointer-events-none" type="text" name="serving_size" value={ fmt.Sprintf("%v", servingQuantity) }/>
		<div class="flex flex-col gap-1 w-full md:w-auto">
			<label class="text-sm text-gray-500" for="serving_size">Serving Size</label>
			<input disabled class="p-2 bg-white rounded-md shadow-md pointer-events-none" type="text" value={ servingSize }/>
		</div>
		<div class="flex flex-col gap-1 w-full md:w-auto">
			<label for="number_of_servings" class="text-sm text-gray-500">Number of Servings</label>
			<input class="p-2 bg-white rounded-md shadow-md" type="number" name="number_of_servings"/>
		</div>
		<button class="w-full px-3 md:py-1 py-4 text-sm font-medium text-white bg-blue-500 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring focus:ring-blue-300">
			Add
		</button>
	</form>
}

func PrepareAddFoodForm(item diet.SearchFoodProduct) string {
	jsonBytes, err := json.Marshal(item)
	if err != nil {
		jsonBytes = []byte("{}")
	}
	return string(jsonBytes)
}

templ FoodLogSuccess() {
	<div class="flex items-center justify-center min-h-[196px]">
		<img class="block h-20" src="/static/img/check.svg"/>
		<span></span>
	</div>
}