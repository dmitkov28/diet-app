package templates

import (
	"fmt"
	"github.com/dmitkov28/dietapp/data"
)

type SettingsErrors struct {
	Current_weight          string
	Target_weight           string
	Target_weight_loss_rate string
	Goal_deadline           string
	Age                     string
	Height                  string
	Activity_level          string
	Sex                     string
}

templ SettingsForm(settings data.Settings, errors SettingsErrors) {
	<div class="w-full p-8">
		<form hx-boost="true" method="POST" action="/settings" hx-indicator="#spinner" class="grid grid-cols-1 md:grid-cols-2 gap-4 my-4">
			<div>
				<label>Age</label>
				if settings.Age != 0 {
					<input
						name="age"
						value={ fmt.Sprintf("%d", settings.Age) }
						class={ "w-full border shadow-md px-3 py-1 rounded-md", templ.KV("border-red-500 text-red-500", errors.Age != ""),
                            templ.KV("border-slate-300", errors.Age == "") }
						type="number"
						placeholder="age"
					/>
				} else {
					<input
						name="age"
						class={ "w-full border shadow-md px-3 py-1 rounded-md", templ.KV("border-red-500 text-red-500", errors.Age != ""),
                            templ.KV("border-slate-300", errors.Age == "") }
						type="number"
						placeholder="age"
					/>
				}
			</div>
			<div class="flex flex-col">
				<label>Sex</label>
				if settings.Sex != "" {
					<select
						name="sex"
						value={ settings.Sex }
						class="w-full border shadow-md px-3 py-1 rounded-md bg-white"
						placeholder="Sex"
					>
						<option value="M">Male</option>
						<option value="F">Female</option>
					</select>
				} else {
					<select
						name="sex"
						class="w-full border shadow-md px-3 py-1 rounded-md bg-white"
						placeholder="Sex"
					>
						<option value="M">Male</option>
						<option value="F">Female</option>
					</select>
				}
			</div>
			<div>
				<label>Current Weight (kg)</label>
				if settings.Current_weight != 0 {
					<input
						value={ fmt.Sprintf("%.1f", settings.Current_weight) }
						name="current_weight"
						step="0.1"
						class={ "w-full border shadow-md px-3 py-1 rounded-md",
                                templ.KV("border-red-500 text-red-500", errors.Current_weight != ""),
                                templ.KV("border-slate-300", errors.Current_weight == "") }
						type="number"
						placeholder="Current weight in kg"
					/>
				} else {
					<input
						name="current_weight"
						step="0.1"
						class={ "w-full border shadow-md px-3 py-1 rounded-md",
                                templ.KV("border-red-500 text-red-500", errors.Current_weight != ""),
                                templ.KV("border-slate-300", errors.Current_weight == "") }
						type="number"
						placeholder="Current weight in kg"
					/>
				}
				if errors.Current_weight != "" {
					<span class="text-red-500">Invalid weight</span>
				}
			</div>
			<div>
				<label>Height (cm)</label>
				if settings.Height != 0 {
					<input
						name="height"
						value={ fmt.Sprintf("%d", settings.Height) }
						class={ "w-full border shadow-md px-3 py-1 rounded-md", templ.KV("border-red-500 text-red-500", errors.Height != ""),
                            templ.KV("border-slate-300", errors.Height == "") }
						type="number"
						placeholder="Height"
					/>
				} else {
					<input
						name="height"
						class={ "w-full border shadow-md px-3 py-1 rounded-md", templ.KV("border-red-500 text-red-500", errors.Height != ""),
                            templ.KV("border-slate-300", errors.Height == "") }
						type="number"
						placeholder="Height"
					/>
				}
			</div>
			<div>
				<label>Activity Level</label>
				if settings.Activity_level != 0 {
					<input
						name="activity_level"
						value={ fmt.Sprintf("%.2f", settings.Activity_level) }
						class={ "w-full border shadow-md px-3 py-1 rounded-md",
                                templ.KV("border-red-500 text-red-500", errors.Activity_level != ""),
                                templ.KV("border-slate-300", errors.Activity_level == "") }
						type="number"
						step="0.01"
						placeholder="Activity level"
					/>
				} else {
					<input
						name="activity_level"
						class="w-full border shadow-md px-3 py-1 rounded-md"
						type="number"
						step="0.01"
						placeholder="Activity level"
					/>
				}
			</div>
			<div>
				<label>Target Weight (kg)</label>
				if settings.Target_weight != 0 {
					<input
						value={ fmt.Sprintf("%.1f", settings.Target_weight) }
						name="target_weight"
						step="0.1"
						class={ "w-full border shadow-md px-3 py-1 rounded-md",
                                templ.KV("border-red-500 text-red-500", errors.Target_weight != ""),
                                templ.KV("border-slate-300", errors.Target_weight == "") }
						type="number"
						placeholder="Target weight in kg"
					/>
				} else {
					<input
						name="target_weight"
						step="0.1"
						class={ "w-full border shadow-md px-3 py-1 rounded-md",
                                templ.KV("border-red-500 text-red-500", errors.Target_weight != ""),
                                templ.KV("border-slate-300", errors.Target_weight == "") }
						type="number"
						placeholder="Target weight in kg"
					/>
				}
				if errors.Target_weight != "" {
					<span class="text-red-500">Invalid weight</span>
				}
			</div>
			<div>
				<label>Target weight loss rate (%)</label>
				if settings.Target_weight_loss_rate != 0 {
					<input
						value={ fmt.Sprintf("%.1f", settings.Target_weight_loss_rate*100) }
						name="target_weight_loss_rate"
						class="w-full border border-slate-300 shadow-md px-3 py-1 rounded-md"
						type="number"
						step="0.1"
						min="0"
						placeholder="Target weight loss rate (%)"
						required
					/>
				} else {
					<input
						name="target_weight_loss_rate"
						class="w-full border border-slate-300 shadow-md px-3 py-1 rounded-md"
						type="number"
						step="0.1"
						min="0"
						placeholder="Target weight loss rate(%)"
						required
					/>
				}
			</div>
			<button class="text-white font-semibold bg-blue-500 rounded-md p-3 flex gap-2 items-center justify-center">
				@Spinner()
				Save
			</button>
		</form>
	</div>
}

templ SettingsPage(settings data.Settings, bmr, calorieGoal, expectedDuration float64) {
	@Base("Settings") {
		<div class="w-full flex flex-col flex-1 items-center justify-center">
			<h1 class="font-bold text-2xl text-center">Settings</h1>
			@SettingsForm(settings, SettingsErrors{})
		</div>
	}
}
