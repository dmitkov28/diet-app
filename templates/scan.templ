package templates

import (
	"fmt"
	"github.com/dmitkov28/dietapp/internal/diet"
)

templ ScanPage() {
	@Base(TemplateProps{PageTitle: "Scan Food"}) {
		<div class="w-full flex flex-col flex-1 gap-2 justify-center items-center p-8">
			<div id="reader" class="w-full max-w-lg"></div>
			<div id="result" class="mt-4 text-md overflow-scroll max-w-full"></div>
			<button
				onclick="startCamera()"
				class="bg-[#2596be] text-white p-3 font-bold rounded-md flex items-center justify-center gap-2 w-full"
			>
				<img class="h-5" src="/static/img/scan.svg"/>
				Scan Food
			</button>
			<a hx-replace-url="/search" hx-get="/search" hx-target="#main-content" class="w-full text-white font-semibold bg-blue-500 rounded-md p-3 flex gap-2 justify-center items-center col-span-2">
				Search Food
			</a>
		</div>
		<script type="module">
	const resultDiv = document.getElementById("result");

	async function fetchFoodFacts(ean) {
		const url = `/scan/${ean}`;
		const res = await fetch(url);
		const data = await res.text();
		return data;
	};

	let isProcessing = false;
	async function onScanSuccess(decodedText, decodedResult) {

		if (isProcessing) return;

		try {
			isProcessing = true;
			const data = await fetchFoodFacts(decodedText);
			resultDiv.innerHTML = data;

			if (window.html5QrCode) {
				try {
					await window.html5QrCode.stop();
					window.html5QrCode.clear();
				} catch (err) {
					console.error(`Failed to close scanner: ${err}`)
				}
			}
		} catch (err) {
			resultDiv.textContent = JSON.stringify(err)
		} finally {
			isProcessing = false;
		}
	}

	function onScanError(errorMessage) {
	}

	async function startCamera() {
		resultDiv.innerHTML = "";

		try {
			const devices = await Html5Qrcode.getCameras();
			if (devices && devices.length) {
				window.html5QrCode = new Html5Qrcode("reader");
				const config = {
					fps: 10,
					qrbox: { width: 250, height: 250 },
					aspectRatio: 1.0
				};

				try {
					await window.html5QrCode.start(
						{ facingMode: "environment" },
						config,
						onScanSuccess,
						onScanError
					);
				} catch (startError) {
					console.error("Failed to start scanner:", startError);
				}
			} else {
				console.error("No cameras found");
				resultDiv.textContent = "No cameras found";
			}
		} catch (cameraError) {
			console.error("Error getting cameras:", cameraError);
			resultDiv.textContent = "Error accessing camera";
		}
	}

	window.startCamera = startCamera
</script>
	}
}

templ FoodFacts(data diet.NutritionData) {
	<div class="rounded-md border-slate-200 shadow-md p-4">
		if data.Status == "failure" {
			<h2>Unknown product ðŸ˜ž</h2>
		} else {
			<h2 class="font-bold text-xl mb-2 text-center">{ data.Product.ProductNameEn } ({ data.Product.Brands })</h2>
			@NutritionTable(data)
		}
	</div>
}

templ NutritionTable(data diet.NutritionData) {
	<div class="max-w-md mx-auto bg-white rounded-lg shadow-md overflow-hidden">
		<table class="w-full border-collapse border border-gray-300">
			<thead class="bg-gray-100">
				<tr>
					<th class="text-left px-4 py-2 border-b border-gray-300 font-semibold">Nutrient</th>
					<th class="text-right px-4 py-2 border-b border-gray-300 font-semibold">Amount</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="text-left px-4 py-2 border-b border-gray-300">Calories</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%d",
					data.Product.Nutriments.EnergyKcal) }
					</td>
				</tr>
				<tr class="bg-gray-50">
					<td class="text-left px-4 py-2 border-b border-gray-300">Total Fat</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%d",
					data.Product.Nutriments.Fat) }g
					</td>
				</tr>
				<tr>
					<td class="text-left px-4 py-2 border-b border-gray-300">Saturated Fat</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%.1f",
					data.Product.Nutriments.SaturatedFat) }g
					</td>
				</tr>
				<tr>
					<td class="text-left px-4 py-2 border-b border-gray-300">Sodium</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%.1f",
					data.Product.Nutriments.Sodium) }mg
					</td>
				</tr>
				<tr class="bg-gray-50">
					<td class="text-left px-4 py-2 border-b border-gray-300">Total Carbohydrate</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%d",
					data.Product.Nutriments.Carbohydrates) }g
					</td>
				</tr>
				<tr>
					<td class="text-left px-4 py-2 border-b border-gray-300">Dietary Fiber</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%.1f",
					data.Product.Nutriments.Fiber) }g
					</td>
				</tr>
				<tr class="bg-gray-50">
					<td class="text-left px-4 py-2 border-b border-gray-300">Sugars</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%.1f",
					data.Product.Nutriments.Sugars) }g
					</td>
				</tr>
				<tr>
					<td class="text-left px-4 py-2">Protein</td>
					<td class="text-right px-4 py-2">
						{ fmt.Sprintf("%d",
					data.Product.Nutriments.Proteins) }g
					</td>
				</tr>
			</tbody>
		</table>
	</div>
}
