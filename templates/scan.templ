package templates

import (
	"fmt"
	"github.com/dmitkov28/dietapp/internal/integrations"
)

templ Scripts() {
	<script src="https://www.unpkg.com/quagga@0.12.1/dist/quagga.min.js"></script>
}

templ ScanPage(isHTMX bool) {
	if isHTMX {
		@ContentScanPage()
	} else {
		@Base(TemplateProps{PageTitle: "Scan Food", Head: Scripts()}) {
			@ContentScanPage()
		}
	}
}

templ FoodFacts(data integrations.NutritionData) {
	<div class="rounded-md border-slate-200 shadow-md p-4">
		if data.Status == "failure" {
			<h2>Unknown product ðŸ˜ž</h2>
			<a hx-replace-url="/scan" hx-get="/scan" hx-target="#main-content" hx-push-url="true">Try again</a>
		} else {
			<h2 class="font-bold text-xl mb-2 text-center">{ data.Product.ProductName } ({ data.Product.Brands })</h2>
			@NutritionTable(data)
		}
	</div>
}

templ NutritionTable(data integrations.NutritionData) {
	<div class="max-w-md mx-auto bg-white rounded-lg shadow-md overflow-hidden">
		<table class="w-full border-collapse border border-gray-300">
			<thead class="bg-gray-100">
				<tr>
					<th class="text-left px-4 py-2 border-b border-gray-300 font-semibold">Nutrient</th>
					<th class="text-right px-4 py-2 border-b border-gray-300 font-semibold">Amount</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td class="text-left px-4 py-2 border-b border-gray-300">Calories</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%.0f",
					data.Product.Nutriments.EnergyKcal) }
					</td>
				</tr>
				<tr class="bg-gray-50">
					<td class="text-left px-4 py-2 border-b border-gray-300">Total Fat</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%.0f",
					data.Product.Nutriments.Fat) }g
					</td>
				</tr>
				<tr>
					<td class="text-left px-4 py-2 border-b border-gray-300">Saturated Fat</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%.1f",
					data.Product.Nutriments.SaturatedFat) }g
					</td>
				</tr>
				<tr>
					<td class="text-left px-4 py-2 border-b border-gray-300">Sodium</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%.1f",
					data.Product.Nutriments.Sodium) }mg
					</td>
				</tr>
				<tr class="bg-gray-50">
					<td class="text-left px-4 py-2 border-b border-gray-300">Total Carbohydrate</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%.0f",
					data.Product.Nutriments.Carbohydrates) }g
					</td>
				</tr>
				<tr>
					<td class="text-left px-4 py-2 border-b border-gray-300">Dietary Fiber</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%.1f",
					data.Product.Nutriments.Fiber) }g
					</td>
				</tr>
				<tr class="bg-gray-50">
					<td class="text-left px-4 py-2 border-b border-gray-300">Sugars</td>
					<td class="text-right px-4 py-2 border-b border-gray-300">
						{ fmt.Sprintf("%.1f",
					data.Product.Nutriments.Sugars) }g
					</td>
				</tr>
				<tr>
					<td class="text-left px-4 py-2">Protein</td>
					<td class="text-right px-4 py-2">
						{ fmt.Sprintf("%.0f",
					data.Product.Nutriments.Proteins) }g
					</td>
				</tr>
			</tbody>
		</table>
	</div>
}

templ ContentScanPage() {
	<style>
        #quagga video,
        #quagga canvas {
            width: 100vw !important;
            height: 100vh !important;
            object-fit: cover;
            position: fixed;
            top: 0;
            left: 0;
        }
    </style>
	<div id="modal-container"></div>
	<div class="fixed inset-0 w-screen h-screen" id="quagga-container">
		<div id="quagga" class="w-full h-full"></div>
	</div>
	<script>
    window.addEventListener('load', function() {
        let quaggaIsRunning = false;

        function stopQuagga() {
            if (quaggaIsRunning) {
                Quagga.stop();
                quaggaIsRunning = false;
            }
        }

        function startQuagga() {
            if (quaggaIsRunning) {
                return;
            }

            const config = {
                inputStream: {
                    name: "Live",
                    type: "LiveStream",
                    target: document.querySelector("#quagga"),
                    constraints: {
                        facingMode: "environment",
                        focusMode: "continuous"
                    },
                },
                decoder: {
                    readers: ["ean_reader", "ean_8_reader"],
                    multiple: false,

                },
                locate: true,
                frequency: 1,
                locator: {
                    patchSize: "medium",
                    halfSample: true
                },
            };

            try {
                Quagga.init(config, function(err) {
                    if (err) {
                        console.error("Quagga initialization failed", err);
                        return;
                    }
                    
                    try {
                        Quagga.start();
                        quaggaIsRunning = true;
                        console.log("Quagga started successfully");
                    } catch (startErr) {
                        console.error("Failed to start Quagga", startErr);
                    }
                });
            } catch (initErr) {
                console.error("Failed to initialize Quagga", initErr);
            }

            Quagga.onDetected(function(result) {
                if (!result || !result.codeResult) {
                    return;
                }

                const code = result.codeResult.code;
                console.log("Detected barcode:", code);

                stopQuagga();

                htmx.ajax("GET", `/scan/${code}`, {
                    target: "#modal-container",
                    swap: "innerHTML"
                }).catch(function(error) {
                    console.error("AJAX request failed:", error);
                }).finally(function() {
                    setTimeout(startQuagga, 1000);
                });
            });

            Quagga.onProcessed(function(result) {
                if (!result) {
                    return;
                }

                const drawingCtx = Quagga.canvas.ctx.overlay;
                const drawingCanvas = Quagga.canvas.dom.overlay;

                if (result.boxes) {
                    drawingCtx.clearRect(0, 0, drawingCanvas.width, drawingCanvas.height);
                    result.boxes.forEach(function(box) {
                        if (box !== result.box) {
                            drawingCtx.strokeStyle = "green";
                            drawingCtx.strokeRect(box.x, box.y, box.width, box.height);
                        }
                    });
                }

                if (result.box) {
                    drawingCtx.strokeStyle = "blue";
                    drawingCtx.strokeRect(
                        result.box.x, 
                        result.box.y, 
                        result.box.width, 
                        result.box.height
                    );
                }
            });
        }

        // Start scanning
        startQuagga();

        // Clean up when leaving the page
        window.addEventListener('beforeunload', stopQuagga);
    });
    </script>
}
