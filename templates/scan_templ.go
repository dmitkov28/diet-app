// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func ScanPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"w-full flex flex-col flex-1 gap-2 justify-center items-center p-8\"><div id=\"reader\" class=\"w-full max-w-lg\"></div><div id=\"result\" class=\"mt-4 text-md overflow-scroll max-w-full\"></div><button onclick=\"startCamera()\" class=\"bg-[#2596be] text-white p-3 font-bold rounded-md flex items-center justify-center gap-2\"><img class=\"h-5\" src=\"/static/img/scan.svg\"> Scan Food</button></div><script type=\"module\">\n\tconst resultDiv = document.getElementById(\"result\");\n\n\tasync function fetchFoodFacts(ean) {\n\t\tconst url = `/scan/${ean}`;\n\t\tconst res = await fetch(url);\n\t\tconst data = await res.text();\n\t\treturn data;\n\t};\n\n\tlet isProcessing = false;\n\tasync function onScanSuccess(decodedText, decodedResult) {\n\n\t\tif (isProcessing) return;\n\n\t\ttry {\n\t\t\tisProcessing = true;\n\t\t\tconst data = await fetchFoodFacts(decodedText);\n\t\t\tresultDiv.innerHTML = data;\n\n\t\t\tif (window.html5QrCode) {\n\t\t\t\ttry {\n\t\t\t\t\tawait window.html5QrCode.stop();\n\t\t\t\t\twindow.html5QrCode.clear();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(`Failed to close scanner: ${err}`)\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tresultDiv.textContent = JSON.stringify(err)\n\t\t} finally {\n\t\t\tisProcessing = false;\n\t\t}\n\t}\n\n\tfunction onScanError(errorMessage) {\n\t}\n\n\tasync function startCamera() {\n\t\tresultDiv.innerHTML = \"\";\n\n\t\ttry {\n\t\t\tconst devices = await Html5Qrcode.getCameras();\n\t\t\tif (devices && devices.length) {\n\t\t\t\twindow.html5QrCode = new Html5Qrcode(\"reader\");\n\t\t\t\tconst config = {\n\t\t\t\t\tfps: 10,\n\t\t\t\t\tqrbox: { width: 250, height: 250 },\n\t\t\t\t\taspectRatio: 1.0\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tawait window.html5QrCode.start(\n\t\t\t\t\t\t{ facingMode: \"environment\" },\n\t\t\t\t\t\tconfig,\n\t\t\t\t\t\tonScanSuccess,\n\t\t\t\t\t\tonScanError\n\t\t\t\t\t);\n\t\t\t\t} catch (startError) {\n\t\t\t\t\tconsole.error(\"Failed to start scanner:\", startError);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(\"No cameras found\");\n\t\t\t\tresultDiv.textContent = \"No cameras found\";\n\t\t\t}\n\t\t} catch (cameraError) {\n\t\t\tconsole.error(\"Error getting cameras:\", cameraError);\n\t\t\tresultDiv.textContent = \"Error accessing camera\";\n\t\t}\n\t}\n\n\twindow.startCamera = startCamera\n</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = Base("Scan").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func FoodFacts(ean string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div>Food Facts here ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(ean)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/scan.templ`, Line: 92, Col: 21}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
